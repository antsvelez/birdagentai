{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO8gAXjFilPdz2IlZNQ07Fj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/antsvelez/birdagentai/blob/main/Agent%20Ai%20code%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zNu1gqrscmYZ"
      },
      "outputs": [],
      "source": [
        "// Main Application JavaScript\n",
        "document.addEventListener('DOMContentLoaded', function() {\n",
        "    // Initialize Bootstrap components\n",
        "    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n",
        "    tooltipTriggerList.map(function (tooltipTriggerEl) {\n",
        "        return new bootstrap.Tooltip(tooltipTriggerEl);\n",
        "    });\n",
        "\n",
        "    // Initialize modals\n",
        "    const modals = document.querySelectorAll('.modal');\n",
        "    modals.forEach(modal => {\n",
        "        new bootstrap.Modal(modal);\n",
        "    });\n",
        "});\n",
        "\n",
        "// Vue Application\n",
        "const app = Vue.createApp({\n",
        "    data() {\n",
        "        return {\n",
        "            // Authentication\n",
        "            isAuthenticated: false,\n",
        "            isLoginMode: true,\n",
        "            errorMessage: '',\n",
        "            currentUser: {},\n",
        "\n",
        "            // Login/Register Data\n",
        "            loginData: {\n",
        "                username: '',\n",
        "                password: ''\n",
        "            },\n",
        "            registerData: {\n",
        "                firstName: '',\n",
        "                lastName: '',\n",
        "                username: '',\n",
        "                email: '',\n",
        "                password: '',\n",
        "                role: 'staff'\n",
        "            },\n",
        "\n",
        "            // Navigation\n",
        "            activeView: 'dashboard',\n",
        "\n",
        "            // Dashboard Data\n",
        "            stats: {\n",
        "                totalPatients: 0,\n",
        "                activeLeads: 0,\n",
        "                upcomingAppointments: 0,\n",
        "                scheduledCalls: 0\n",
        "            },\n",
        "            recentLeads: [],\n",
        "            upcomingAppointments: [],\n",
        "\n",
        "            // Patients Data\n",
        "            patients: [],\n",
        "            newPatient: {\n",
        "                first_name: '',\n",
        "                last_name: '',\n",
        "                email: '',\n",
        "                phone: '',\n",
        "                date_of_birth: '',\n",
        "                address: '',\n",
        "                insurance_provider: '',\n",
        "                insurance_id: '',\n",
        "                medical_history: ''\n",
        "            },\n",
        "            showAddPatientModal: false,\n",
        "\n",
        "            // Leads Data\n",
        "            leads: [],\n",
        "            showAddLeadModal: false,\n",
        "\n",
        "            // Appointments Data\n",
        "            appointments: [],\n",
        "            showAddAppointmentModal: false,\n",
        "\n",
        "            // Calls Data\n",
        "            calls: [],\n",
        "            showAddCallModal: false,\n",
        "\n",
        "            // Call Transcript\n",
        "            showTranscriptModal: false,\n",
        "            currentTranscript: '',\n",
        "            isTyping: false,\n",
        "\n",
        "            // Profile Data\n",
        "            profileData: {\n",
        "                username: '',\n",
        "                email: '',\n",
        "                firstName: '',\n",
        "                lastName: '',\n",
        "                role: ''\n",
        "            },\n",
        "            passwordData: {\n",
        "                currentPassword: '',\n",
        "                newPassword: '',\n",
        "                confirmPassword: ''\n",
        "            }\n",
        "        };\n",
        "    },\n",
        "\n",
        "    mounted() {\n",
        "        // Check if user is already logged in\n",
        "        const token = localStorage.getItem('token');\n",
        "        if (token) {\n",
        "            this.isAuthenticated = true;\n",
        "            this.currentUser = JSON.parse(localStorage.getItem('user'));\n",
        "            this.loadDashboardData();\n",
        "            this.initializeProfileData();\n",
        "        }\n",
        "\n",
        "        // Initialize Bootstrap modals\n",
        "        this.$nextTick(() => {\n",
        "            const addPatientModal = document.getElementById('addPatientModal');\n",
        "            if (addPatientModal) {\n",
        "                this.patientModal = new bootstrap.Modal(addPatientModal);\n",
        "            }\n",
        "\n",
        "            const callTranscriptModal = document.getElementById('callTranscriptModal');\n",
        "            if (callTranscriptModal) {\n",
        "                this.transcriptModal = new bootstrap.Modal(callTranscriptModal);\n",
        "            }\n",
        "        });\n",
        "    },\n",
        "\n",
        "    methods: {\n",
        "        // Authentication Methods\n",
        "        toggleAuthMode() {\n",
        "            this.isLoginMode = !this.isLoginMode;\n",
        "            this.errorMessage = '';\n",
        "        },\n",
        "\n",
        "        login() {\n",
        "            // Simulate API call for demo\n",
        "            if (this.loginData.username && this.loginData.password) {\n",
        "                // In a real app, this would be an API call\n",
        "                setTimeout(() => {\n",
        "                    // Mock successful login\n",
        "                    const mockUser = {\n",
        "                        id: '1',\n",
        "                        username: this.loginData.username,\n",
        "                        email: `${this.loginData.username}@example.com`,\n",
        "                        role: 'staff',\n",
        "                        first_name: 'Demo',\n",
        "                        last_name: 'User'\n",
        "                    };\n",
        "\n",
        "                    const mockToken = 'mock-jwt-token';\n",
        "\n",
        "                    // Store in localStorage\n",
        "                    localStorage.setItem('token', mockToken);\n",
        "                    localStorage.setItem('user', JSON.stringify(mockUser));\n",
        "\n",
        "                    // Update app state\n",
        "                    this.isAuthenticated = true;\n",
        "                    this.currentUser = mockUser;\n",
        "                    this.errorMessage = '';\n",
        "\n",
        "                    // Load initial data\n",
        "                    this.loadDashboardData();\n",
        "                    this.initializeProfileData();\n",
        "                }, 1000);\n",
        "            } else {\n",
        "                this.errorMessage = 'Please enter both username and password.';\n",
        "            }\n",
        "        },\n",
        "\n",
        "        register() {\n",
        "            // Validate form\n",
        "            if (!this.registerData.username || !this.registerData.email || !this.registerData.password) {\n",
        "                this.errorMessage = 'Please fill in all required fields.';\n",
        "                return;\n",
        "            }\n",
        "\n",
        "            // Simulate API call for demo\n",
        "            setTimeout(() => {\n",
        "                // Mock successful registration\n",
        "                this.isLoginMode = true;\n",
        "                this.errorMessage = '';\n",
        "                this.loginData.username = this.registerData.username;\n",
        "                this.loginData.password = this.registerData.password;\n",
        "\n",
        "                // Clear registration form\n",
        "                this.registerData = {\n",
        "                    firstName: '',\n",
        "                    lastName: '',\n",
        "                    username: '',\n",
        "                    email: '',\n",
        "                    password: '',\n",
        "                    role: 'staff'\n",
        "                };\n",
        "\n",
        "                // Show success message\n",
        "                alert('Registration successful! Please log in.');\n",
        "            }, 1000);\n",
        "        },\n",
        "\n",
        "        logout() {\n",
        "            // Clear authentication data\n",
        "            localStorage.removeItem('token');\n",
        "            localStorage.removeItem('user');\n",
        "\n",
        "            // Reset app state\n",
        "            this.isAuthenticated = false;\n",
        "            this.currentUser = {};\n",
        "            this.activeView = 'dashboard';\n",
        "        },\n",
        "\n",
        "        // Navigation Methods\n",
        "        setActiveView(view) {\n",
        "            this.activeView = view;\n",
        "\n",
        "            // Load data based on active view\n",
        "            switch (view) {\n",
        "                case 'dashboard':\n",
        "                    this.loadDashboardData();\n",
        "                    break;\n",
        "                case 'patients':\n",
        "                    this.loadPatients();\n",
        "                    break;\n",
        "                case 'leads':\n",
        "                    this.loadLeads();\n",
        "                    break;\n",
        "                case 'appointments':\n",
        "                    this.loadAppointments();\n",
        "                    break;\n",
        "                case 'calls':\n",
        "                    this.loadCalls();\n",
        "                    break;\n",
        "                case 'profile':\n",
        "                    this.initializeProfileData();\n",
        "                    break;\n",
        "            }\n",
        "        },\n",
        "\n",
        "        // Dashboard Methods\n",
        "        loadDashboardData() {\n",
        "            // Simulate API calls for demo\n",
        "            setTimeout(() => {\n",
        "                // Mock dashboard stats\n",
        "                this.stats = {\n",
        "                    totalPatients: 24,\n",
        "                    activeLeads: 8,\n",
        "                    upcomingAppointments: 12,\n",
        "                    scheduledCalls: 5\n",
        "                };\n",
        "\n",
        "                // Mock recent leads\n",
        "                this.recentLeads = [\n",
        "                    { id: '1', patientName: 'John Smith', source: 'referral', score: 4, status: 'new', created_at: '2025-05-25T10:30:00' },\n",
        "                    { id: '2', patientName: 'Sarah Johnson', source: 'referral', score: 3, status: 'contacted', created_at: '2025-05-24T14:15:00' },\n",
        "                    { id: '3', patientName: 'Michael Brown', source: 'referral', score: 5, status: 'qualified', created_at: '2025-05-23T09:45:00' }\n",
        "                ];\n",
        "\n",
        "                // Mock upcoming appointments\n",
        "                this.upcomingAppointments = [\n",
        "                    { id: '1', patientName: 'Emily Davis', appointmentType: 'Cleaning', appointmentDate: '2025-05-28T09:00:00' },\n",
        "                    { id: '2', patientName: 'Robert Wilson', appointmentType: 'Consultation', appointmentDate: '2025-05-28T11:30:00' },\n",
        "                    { id: '3', patientName: 'Jennifer Lee', appointmentType: 'Follow-up', appointmentDate: '2025-05-29T14:00:00' }\n",
        "                ];\n",
        "            }, 500);\n",
        "        },\n",
        "\n",
        "        // Patient Methods\n",
        "        loadPatients() {\n",
        "            // Simulate API call for demo\n",
        "            setTimeout(() => {\n",
        "                // Mock patients data\n",
        "                this.patients = [\n",
        "                    { id: '1', first_name: 'John', last_name: 'Smith', email: 'john.smith@example.com', phone: '(555) 123-4567', insurance_provider: 'Blue Cross' },\n",
        "                    { id: '2', first_name: 'Sarah', last_name: 'Johnson', email: 'sarah.j@example.com', phone: '(555) 234-5678', insurance_provider: 'Aetna' },\n",
        "                    { id: '3', first_name: 'Michael', last_name: 'Brown', email: 'mbrown@example.com', phone: '(555) 345-6789', insurance_provider: 'Cigna' },\n",
        "                    { id: '4', first_name: 'Emily', last_name: 'Davis', email: 'emily.davis@example.com', phone: '(555) 456-7890', insurance_provider: 'UnitedHealth' }\n",
        "                ];\n",
        "            }, 500);\n",
        "        },\n",
        "\n",
        "        addPatient() {\n",
        "            // Validate form\n",
        "            if (!this.newPatient.first_name || !this.newPatient.last_name || !this.newPatient.email || !this.newPatient.phone) {\n",
        "                alert('Please fill in all required fields.');\n",
        "                return;\n",
        "            }\n",
        "\n",
        "            // Simulate API call for demo\n",
        "            setTimeout(() => {\n",
        "                // Add ID to new patient\n",
        "                const patientWithId = {\n",
        "                    ...this.newPatient,\n",
        "                    id: Date.now().toString()\n",
        "                };\n",
        "\n",
        "                // Add to patients array\n",
        "                this.patients.unshift(patientWithId);\n",
        "\n",
        "                // Close modal and reset form\n",
        "                this.showAddPatientModal = false;\n",
        "                this.newPatient = {\n",
        "                    first_name: '',\n",
        "                    last_name: '',\n",
        "                    email: '',\n",
        "                    phone: '',\n",
        "                    date_of_birth: '',\n",
        "                    address: '',\n",
        "                    insurance_provider: '',\n",
        "                    insurance_id: '',\n",
        "                    medical_history: ''\n",
        "                };\n",
        "\n",
        "                // Update dashboard stats\n",
        "                this.stats.totalPatients++;\n",
        "\n",
        "                // Show success message\n",
        "                alert('Patient added successfully!');\n",
        "            }, 500);\n",
        "        },\n",
        "\n",
        "        viewPatient(patient) {\n",
        "            alert(`Viewing patient: ${patient.first_name} ${patient.last_name}`);\n",
        "            // In a real app, this would open a detailed view\n",
        "        },\n",
        "\n",
        "        editPatient(patient) {\n",
        "            alert(`Editing patient: ${patient.first_name} ${patient.last_name}`);\n",
        "            // In a real app, this would open an edit form\n",
        "        },\n",
        "\n",
        "        confirmDeletePatient(patient) {\n",
        "            if (confirm(`Are you sure you want to delete patient ${patient.first_name} ${patient.last_name}?`)) {\n",
        "                // Simulate API call for demo\n",
        "                setTimeout(() => {\n",
        "                    // Remove from patients array\n",
        "                    this.patients = this.patients.filter(p => p.id !== patient.id);\n",
        "\n",
        "                    // Update dashboard stats\n",
        "                    this.stats.totalPatients--;\n",
        "\n",
        "                    // Show success message\n",
        "                    alert('Patient deleted successfully!');\n",
        "                }, 500);\n",
        "            }\n",
        "        },\n",
        "\n",
        "        // Lead Methods\n",
        "        loadLeads() {\n",
        "            // Simulate API call for demo\n",
        "            setTimeout(() => {\n",
        "                // Mock leads data\n",
        "                this.leads = [\n",
        "                    { id: '1', patientName: 'John Smith', source: 'referral', score: 4, status: 'new', created_at: '2025-05-25T10:30:00' },\n",
        "                    { id: '2', patientName: 'Sarah Johnson', source: 'referral', score: 3, status: 'contacted', created_at: '2025-05-24T14:15:00' },\n",
        "                    { id: '3', patientName: 'Michael Brown', source: 'referral', score: 5, status: 'qualified', created_at: '2025-05-23T09:45:00' },\n",
        "                    { id: '4', patientName: 'Emily Davis', source: 'referral', score: 2, status: 'new', created_at: '2025-05-22T16:20:00' },\n",
        "                    { id: '5', patientName: 'Robert Wilson', source: 'referral', score: 1, status: 'contacted', created_at: '2025-05-21T11:10:00' }\n",
        "                ];\n",
        "            }, 500);\n",
        "        },\n",
        "\n",
        "        getLeadStatusBadgeClass(status) {\n",
        "            switch (status) {\n",
        "                case 'new':\n",
        "                    return 'badge bg-primary';\n",
        "                case 'contacted':\n",
        "                    return 'badge bg-info text-dark';\n",
        "                case 'qualified':\n",
        "                    return 'badge bg-warning text-dark';\n",
        "                case 'converted':\n",
        "                    return 'badge bg-success';\n",
        "                case 'lost':\n",
        "                    return 'badge bg-danger';\n",
        "                default:\n",
        "                    return 'badge bg-secondary';\n",
        "            }\n",
        "        },\n",
        "\n",
        "        viewLead(lead) {\n",
        "            alert(`Viewing lead: ${lead.patientName}`);\n",
        "            // In a real app, this would open a detailed view\n",
        "        },\n",
        "\n",
        "        editLead(lead) {\n",
        "            alert(`Editing lead: ${lead.patientName}`);\n",
        "            // In a real app, this would open an edit form\n",
        "        },\n",
        "\n",
        "        scheduleCall(lead) {\n",
        "            alert(`Scheduling call for lead: ${lead.patientName}`);\n",
        "            // In a real app, this would open a call scheduling form\n",
        "            this.setActiveView('calls');\n",
        "        },\n",
        "\n",
        "        // Appointment Methods\n",
        "        loadAppointments() {\n",
        "            // Simulate API call for demo\n",
        "            setTimeout(() => {\n",
        "                // Mock appointments data\n",
        "                this.appointments = [\n",
        "                    { id: '1', patientName: 'Emily Davis', appointment_type: 'Cleaning', appointment_date: '2025-05-28T09:00:00', status: 'scheduled' },\n",
        "                    { id: '2', patientName: 'Robert Wilson', appointment_type: 'Consultation', appointment_date: '2025-05-28T11:30:00', status: 'scheduled' },\n",
        "                    { id: '3', patientName: 'Jennifer Lee', appointment_type: 'Follow-up', appointment_date: '2025-05-29T14:00:00', status: 'scheduled' },\n",
        "                    { id: '4', patientName: 'Michael Brown', appointment_type: 'Root Canal', appointment_date: '2025-05-30T10:15:00', status: 'scheduled' },\n",
        "                    { id: '5', patientName: 'Sarah Johnson', appointment_type: 'Cleaning', appointment_date: '2025-05-26T15:45:00', status: 'completed' }\n",
        "                ];\n",
        "            }, 500);\n",
        "        },\n",
        "\n",
        "        getAppointmentStatusBadgeClass(status) {\n",
        "            switch (status) {\n",
        "                case 'scheduled':\n",
        "                    return 'badge bg-primary';\n",
        "                case 'completed':\n",
        "                    return 'badge bg-success';\n",
        "                case 'cancelled':\n",
        "                    return 'badge bg-danger';\n",
        "                case 'no-show':\n",
        "                    return 'badge bg-warning text-dark';\n",
        ""
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime\n",
        "from typing import Optional\n",
        "\n",
        "class DentalAppointment:\n",
        "    def __init__(self, patient_id: str, appointment_date: datetime,\n",
        "                 procedure: str, dentist_id: str):\n",
        "        self.patient_id = patient_id\n",
        "        self.appointment_date = appointment_date\n",
        "        self.procedure = procedure\n",
        "        self.dentist_id = dentist_id\n",
        "        self.status = \"scheduled\"\n",
        "        self.notes: Optional[str] = None\n",
        "\n",
        "    def update_status(self, new_status: str):\n",
        "        \"\"\"Update appointment status while maintaining audit trail\"\"\"\n",
        "        self.status = new_status\n",
        "        self._log_status_change(new_status)\n",
        "\n",
        "    def add_note(self, note: str):\n",
        "        \"\"\"Add a note to the appointment record\"\"\"\n",
        "        self.notes = note\n",
        "        self._log_note_addition()\n",
        "\n",
        "    def _log_status_change(self, new_status: str):\n",
        "        \"\"\"Private method to log status changes for audit purposes\"\"\"\n",
        "        # This would typically write to a secure audit log\n",
        "        pass\n",
        "\n",
        "    def _log_note_addition(self):\n",
        "        \"\"\"Private method to log note additions for audit purposes\"\"\"\n",
        "        # This would typically write to a secure audit log\n",
        "        pass\n",
        "\n",
        "    def get_appointment_details(self) -> dict:\n",
        "        \"\"\"Get appointment details in a HIPAA-compliant way\"\"\"\n",
        "        return {\n",
        "            \"appointment_id\": hash(self.patient_id + str(self.appointment_date)),\n",
        "            \"scheduled_date\": self.appointment_date.isoformat(),\n",
        "            \"status\": self.status\n",
        "        }\n",
        "\n",
        "# Example usage:\n",
        "if __name__ == \"__main__\":\n",
        "    # Create a new appointment\n",
        "    appointment = DentalAppointment(\n",
        "        patient_id=\"PAT123\",\n",
        "        appointment_date=datetime(2025, 6, 10, 14, 0),\n",
        "        procedure=\"Routine Checkup\",\n",
        "        dentist_id=\"DENT456\"\n",
        "    )\n",
        "\n",
        "    print(appointment.get_appointment_details())\n"
      ],
      "metadata": {
        "id": "7lQGf2Rxcv-r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from flask_sqlalchemy import SQLAlchemy\n",
        "from datetime import datetime\n",
        "import uuid\n",
        "from src.models.patient import db\n",
        "\n",
        "class Call(db.Model):\n",
        "    __tablename__ = 'calls'\n",
        "\n",
        "    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n",
        "    lead_id = db.Column(db.String(36), db.ForeignKey('leads.id'), nullable=True)\n",
        "    patient_id = db.Column(db.String(36), db.ForeignKey('patients.id'), nullable=True)\n",
        "    call_type = db.Column(db.String(20), nullable=False)  # inbound, outbound\n",
        "    call_purpose = db.Column(db.String(50), nullable=False)  # appointment_reminder, follow_up, new_patient_outreach\n",
        "    call_status = db.Column(db.String(20), nullable=False)  # scheduled, completed, failed, no_answer\n",
        "    call_duration = db.Column(db.Integer, nullable=True)  # duration in seconds\n",
        "    recording_url = db.Column(db.String(255), nullable=True)\n",
        "    transcript = db.Column(db.Text, nullable=True)\n",
        "    notes = db.Column(db.Text, nullable=True)\n",
        "    scheduled_time = db.Column(db.DateTime, nullable=True)\n",
        "    completed_time = db.Column(db.DateTime, nullable=True)\n",
        "    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n",
        "    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f'<Call {self.id} - {self.call_type} - {self.call_status}>'\n",
        "\n",
        "    def to_dict(self):\n",
        "        return {\n",
        "            'id': self.id,\n",
        "            'lead_id': self.lead_id,\n",
        "            'patient_id': self.patient_id,\n",
        "            'call_type': self.call_type,\n",
        "            'call_purpose': self.call_purpose,\n",
        "            'call_status': self.call_status,\n",
        "            'call_duration': self.call_duration,\n",
        "            'recording_url': self.recording_url,\n",
        "            'transcript': self.transcript,\n",
        "            'notes': self.notes,\n",
        "            'scheduled_time': self.scheduled_time.strftime('%Y-%m-%d %H:%M:%S') if self.scheduled_time else None,\n",
        "            'completed_time': self.completed_time.strftime('%Y-%m-%d %H:%M:%S') if self.completed_time else None,\n",
        "            'created_at': self.created_at.strftime('%Y-%m-%d %H:%M:%S'),\n",
        "            'updated_at': self.updated_at.strftime('%Y-%m-%d %H:%M:%S')\n",
        "        }"
      ],
      "metadata": {
        "id": "OsHxeVeCdYZ9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from flask_sqlalchemy import SQLAlchemy\n",
        "from datetime import datetime\n",
        "import uuid\n",
        "from src.models.patient import db\n",
        "\n",
        "class Lead(db.Model):\n",
        "    __tablename__ = 'leads'\n",
        "\n",
        "    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n",
        "    patient_id = db.Column(db.String(36), db.ForeignKey('patients.id'), nullable=True)\n",
        "    source = db.Column(db.String(50), nullable=False, default='referral')  # Default source is referral\n",
        "    score = db.Column(db.Integer, nullable=False, default=1)  # 1-5 scoring system\n",
        "    status = db.Column(db.String(20), nullable=False, default='new')  # new, contacted, qualified, converted, lost\n",
        "    notes = db.Column(db.Text, nullable=True)\n",
        "    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n",
        "    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n",
        "\n",
        "    # Relationships\n",
        "    calls = db.relationship('Call', backref='lead', lazy=True)\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f'<Lead {self.id} - Score: {self.score}>'\n",
        "\n",
        "    def to_dict(self):\n",
        "        return {\n",
        "            'id': self.id,\n",
        "            'patient_id': self.patient_id,\n",
        "            'source': self.source,\n",
        "            'score': self.score,\n",
        "            'status': self.status,\n",
        "            'notes': self.notes,\n",
        "            'created_at': self.created_at.strftime('%Y-%m-%d %H:%M:%S'),\n",
        "            'updated_at': self.updated_at.strftime('%Y-%m-%d %H:%M:%S')\n",
        "        }\n"
      ],
      "metadata": {
        "id": "dPRfquORdd9Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import sys\n",
        "# DON'T CHANGE THIS !!!\n",
        "sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))\n",
        "\n",
        "from flask import Flask, send_from_directory, jsonify\n",
        "from src.models.user import db\n",
        "from src.routes.user import user_bp\n",
        "from src.routes.patient import patient_bp\n",
        "from src.routes.lead import lead_bp\n",
        "from src.routes.appointment import appointment_bp\n",
        "from src.routes.call import call_bp\n",
        "\n",
        "app = Flask(__name__, static_folder=os.path.join(os.path.dirname(__file__), 'static'))\n",
        "app.config['SECRET_KEY'] = 'asdf#FGSgvasgf$5$WGT'\n",
        "\n",
        "# Register blueprints\n",
        "app.register_blueprint(user_bp, url_prefix='/api')\n",
        "app.register_blueprint(patient_bp, url_prefix='/api')\n",
        "app.register_blueprint(lead_bp, url_prefix='/api')\n",
        "app.register_blueprint(appointment_bp, url_prefix='/api')\n",
        "app.register_blueprint(call_bp, url_prefix='/api')\n",
        "\n",
        "# Enable database\n",
        "app.config['SQLALCHEMY_DATABASE_URI'] = f\"mysql+pymysql://{os.getenv('DB_USERNAME', 'root')}:{os.getenv('DB_PASSWORD', 'password')}@{os.getenv('DB_HOST', 'localhost')}:{os.getenv('DB_PORT', '3306')}/{os.getenv('DB_NAME', 'mydb')}\"\n",
        "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n",
        "db.init_app(app)\n",
        "\n",
        "# Create database tables\n",
        "with app.app_context():\n",
        "    db.create_all()\n",
        "\n",
        "# Health check endpoint\n",
        "@app.route('/api/health', methods=['GET'])\n",
        "def health_check():\n",
        "    return jsonify({'status': 'healthy', 'message': 'Dental AI Agent API is running'}), 200\n",
        "\n",
        "@app.route('/', defaults={'path': ''})\n",
        "@app.route('/<path:path>')\n",
        "def serve(path):\n",
        "    static_folder_path = app.static_folder\n",
        "    if static_folder_path is None:\n",
        "            return \"Static folder not configured\", 404\n",
        "\n",
        "    if path != \"\" and os.path.exists(os.path.join(static_folder_path, path)):\n",
        "        return send_from_directory(static_folder_path, path)\n",
        "    else:\n",
        "        index_path = os.path.join(static_folder_path, 'index.html')\n",
        "        if os.path.exists(index_path):\n",
        "            return send_from_directory(static_folder_path, 'index.html')\n",
        "        else:\n",
        "            return \"index.html not found\", 404\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(host='0.0.0.0', port=5000, debug=True)\n"
      ],
      "metadata": {
        "id": "8JfaGyN7dj6m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from flask_sqlalchemy import SQLAlchemy\n",
        "from datetime import datetime\n",
        "import uuid\n",
        "\n",
        "db = SQLAlchemy()\n",
        "\n",
        "class Patient(db.Model):\n",
        "    __tablename__ = 'patients'\n",
        "\n",
        "    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n",
        "    first_name = db.Column(db.String(100), nullable=False)\n",
        "    last_name = db.Column(db.String(100), nullable=False)\n",
        "    email = db.Column(db.String(120), unique=True, nullable=False)\n",
        "    phone = db.Column(db.String(20), nullable=False)\n",
        "    date_of_birth = db.Column(db.Date, nullable=True)\n",
        "    address = db.Column(db.String(200), nullable=True)\n",
        "    insurance_provider = db.Column(db.String(100), nullable=True)\n",
        "    insurance_id = db.Column(db.String(50), nullable=True)\n",
        "    medical_history = db.Column(db.Text, nullable=True)\n",
        "    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n",
        "    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n",
        "\n",
        "    # Relationships\n",
        "    appointments = db.relationship('Appointment', backref='patient', lazy=True)\n",
        "    leads = db.relationship('Lead', backref='patient', lazy=True)\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f'<Patient {self.first_name} {self.last_name}>'\n",
        "\n",
        "    def to_dict(self):\n",
        "        return {\n",
        "            'id': self.id,\n",
        "            'first_name': self.first_name,\n",
        "            'last_name': self.last_name,\n",
        "            'email': self.email,\n",
        "            'phone': self.phone,\n",
        "            'date_of_birth': self.date_of_birth.strftime('%Y-%m-%d') if self.date_of_birth else None,\n",
        "            'address': self.address,\n",
        "            'insurance_provider': self.insurance_provider,\n",
        "            'created_at': self.created_at.strftime('%Y-%m-%d %H:%M:%S'),\n",
        "            'updated_at': self.updated_at.strftime('%Y-%m-%d %H:%M:%S')\n",
        "        }\n"
      ],
      "metadata": {
        "id": "SuVJSEj-doRU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "/* Main Styles */\n",
        "body {\n",
        "    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n",
        "    background-color: #f8f9fa;\n",
        "}\n",
        "\n",
        ".navbar-brand {\n",
        "    font-weight: 600;\n",
        "}\n",
        "\n",
        "/* Dashboard Cards */\n",
        ".card {\n",
        "    border: none;\n",
        "    border-radius: 10px;\n",
        "    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\n",
        "    transition: transform 0.3s ease;\n",
        "}\n",
        "\n",
        ".card:hover {\n",
        "    transform: translateY(-5px);\n",
        "}\n",
        "\n",
        "/* Lead Score Stars */\n",
        ".lead-score .fa-star {\n",
        "    font-size: 0.9rem;\n",
        "    margin-right: 2px;\n",
        "}\n",
        "\n",
        "/* Status Badges */\n",
        ".badge {\n",
        "    padding: 0.5em 0.8em;\n",
        "    font-weight: 500;\n",
        "    border-radius: 30px;\n",
        "}\n",
        "\n",
        "/* Typing Indicator for Call Simulation */\n",
        ".typing-indicator {\n",
        "    display: flex;\n",
        "    justify-content: center;\n",
        "    align-items: center;\n",
        "    height: 30px;\n",
        "}\n",
        "\n",
        ".typing-indicator .dot {\n",
        "    display: inline-block;\n",
        "    width: 8px;\n",
        "    height: 8px;\n",
        "    border-radius: 50%;\n",
        "    background-color: #6c757d;\n",
        "    margin: 0 3px;\n",
        "    animation: typing 1.5s infinite ease-in-out;\n",
        "}\n",
        "\n",
        ".typing-indicator .dot:nth-child(1) {\n",
        "    animation-delay: 0s;\n",
        "}\n",
        "\n",
        ".typing-indicator .dot:nth-child(2) {\n",
        "    animation-delay: 0.2s;\n",
        "}\n",
        "\n",
        ".typing-indicator .dot:nth-child(3) {\n",
        "    animation-delay: 0.4s;\n",
        "}\n",
        "\n",
        "@keyframes typing {\n",
        "    0%, 60%, 100% {\n",
        "        transform: translateY(0);\n",
        "        opacity: 0.5;\n",
        "    }\n",
        "    30% {\n",
        "        transform: translateY(-5px);\n",
        "        opacity: 1;\n",
        "    }\n",
        "}\n",
        "\n",
        "/* Transcript Container */\n",
        ".transcript-container {\n",
        "    max-height: 300px;\n",
        "    overflow-y: auto;\n",
        "    border: 1px solid #dee2e6;\n",
        "}\n",
        "\n",
        "/* Form Controls */\n",
        ".form-control:focus {\n",
        "    border-color: #80bdff;\n",
        "    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n",
        "}\n",
        "\n",
        "/* Table Styles */\n",
        ".table th {\n",
        "    font-weight: 600;\n",
        "    color: #495057;\n",
        "}\n",
        "\n",
        ".table-hover tbody tr:hover {\n",
        "    background-color: rgba(0, 123, 255, 0.05);\n",
        "}\n",
        "\n",
        "/* Modal Styles */\n",
        ".modal-content {\n",
        "    border: none;\n",
        "    border-radius: 10px;\n",
        "}\n",
        "\n",
        ".modal-header {\n",
        "    border-bottom: 1px solid #e9ecef;\n",
        "    background-color: #f8f9fa;\n",
        "    border-top-left-radius: 10px;\n",
        "    border-top-right-radius: 10px;\n",
        "}\n",
        "\n",
        ".modal-footer {\n",
        "    border-top: 1px solid #e9ecef;\n",
        "    background-color: #f8f9fa;\n",
        "    border-bottom-left-radius: 10px;\n",
        "    border-bottom-right-radius: 10px;\n",
        "}\n",
        "\n",
        "/* HIPAA Compliance Indicator */\n",
        ".hipaa-badge {\n",
        "    background-color: #28a745;\n",
        "    color: white;\n",
        "    font-size: 0.7rem;\n",
        "    padding: 0.2rem 0.5rem;\n",
        "    border-radius: 4px;\n",
        "    margin-left: 5px;\n",
        "}\n",
        "\n",
        "/* Responsive Adjustments */\n",
        "@media (max-width: 768px) {\n",
        "    .card {\n",
        "        margin-bottom: 20px;\n",
        "    }\n",
        "\n",
        "    .table-responsive {\n",
        "        font-size: 0.9rem;\n",
        "    }\n",
        "}\n"
      ],
      "metadata": {
        "id": "wgeM-pHxdzJa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from flask_sqlalchemy import SQLAlchemy\n",
        "from datetime import datetime\n",
        "import uuid\n",
        "from werkzeug.security import generate_password_hash, check_password_hash\n",
        "\n",
        "db = SQLAlchemy()\n",
        "\n",
        "class User(db.Model):\n",
        "    __tablename__ = 'users'\n",
        "\n",
        "    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))\n",
        "    username = db.Column(db.String(80), unique=True, nullable=False)\n",
        "    email = db.Column(db.String(120), unique=True, nullable=False)\n",
        "    password_hash = db.Column(db.String(255), nullable=False)\n",
        "    role = db.Column(db.String(20), nullable=False, default='staff')  # admin, staff, dentist\n",
        "    first_name = db.Column(db.String(100), nullable=True)\n",
        "    last_name = db.Column(db.String(100), nullable=True)\n",
        "    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n",
        "    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f'<User {self.username}>'\n",
        "\n",
        "    def set_password(self, password):\n",
        "        self.password_hash = generate_password_hash(password)\n",
        "\n",
        "    def check_password(self, password):\n",
        "        return check_password_hash(self.password_hash, password)\n",
        "\n",
        "    def to_dict(self):\n",
        "        return {\n",
        "            'id': self.id,\n",
        "            'username': self.username,\n",
        "            'email': self.email,\n",
        "            'role': self.role,\n",
        "            'first_name': self.first_name,\n",
        "            'last_name': self.last_name,\n",
        "            'created_at': self.created_at.strftime('%Y-%m-%d %H:%M:%S'),\n",
        "            'updated_at': self.updated_at.strftime('%Y-%m-%d %H:%M:%S')\n",
        "        }\n"
      ],
      "metadata": {
        "id": "1s9P6oMrd0Px"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
# Database Configuration
DB_USERNAME=root
DB_PASSWORD=antsbug123
DB_HOST=localhost
DB_PORT=3306
DB_NAME=mydb

# Flask Configuration
FLASK_SECRET_KEY=antsbuglife123
FLASK_APP=app.py
FLASK_ENV=production

# JWT Configuration
JWT_SECRET_KEY=123bugsieat

# Email Configuration (if needed)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USERNAME=your_email@gmail.com
EMAIL_PASSWORD=your_email_password

# Other Configuration
DEBUG=False
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
ENV/

# IDE
.idea/
.vscode/
*.swp
*.swo

# Environment variables
.env
.env.local
.env.*.local

# Logs
*.log

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Database
*.db
*.sqlite3

# Build files
dist/
build/
*.pyc
__pycache__/

# Coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover

# Debug logs
*.log
Flask==2.3.3
Flask-SQLAlchemy==3.1.1
Flask-Cors==4.0.0
python-dotenv==1.0.0
PyMySQL==1.1.0
gunicorn==21.2.0
Werkzeug==2.3.7
Jinja2==3.1.2
itsdangerous==2.1.2
click==8.1.7
MarkupSafe==2.1.3
SQLAlchemy==2.0.23
email-validator==2.1.0.post1
python-jose==3.3.0
cryptography==41.0.3

pip freeze > requirements.txt
